//Package LifeService comment
// This file war generated by tars2go 1.1
// Generated from ClubActivityManager.tars
package LifeService

import (
	"context"
	"fmt"
	"github.com/TarsCloud/TarsGo/tars"
	m "github.com/TarsCloud/TarsGo/tars/model"
	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
	"github.com/TarsCloud/TarsGo/tars/protocol/res/requestf"
	"github.com/TarsCloud/TarsGo/tars/util/current"
	"github.com/TarsCloud/TarsGo/tars/util/tools"
)

//ClubActivityManager struct
type ClubActivityManager struct {
	s m.Servant
}

//CreateClubManager is the proxy function for the method defined in the tars file, with the context
func (_obj *ClubActivityManager) CreateClubManager(WxId string, ClubId string, ErrCode *ErrorCode, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(WxId, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(ClubId, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "CreateClubManager", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32((*int32)(&(*ErrCode)), 3, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//CreateClubManagerWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *ClubActivityManager) CreateClubManagerWithContext(ctx context.Context, WxId string, ClubId string, ErrCode *ErrorCode, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(WxId, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(ClubId, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "CreateClubManager", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32((*int32)(&(*ErrCode)), 3, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//CreateClub is the proxy function for the method defined in the tars file, with the context
func (_obj *ClubActivityManager) CreateClub(ClubInfo *ClubInfo, ErrCode *ErrorCode, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = ClubInfo.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "CreateClub", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32((*int32)(&(*ErrCode)), 2, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//CreateClubWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *ClubActivityManager) CreateClubWithContext(ctx context.Context, ClubInfo *ClubInfo, ErrCode *ErrorCode, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = ClubInfo.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "CreateClub", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32((*int32)(&(*ErrCode)), 2, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetClubList is the proxy function for the method defined in the tars file, with the context
func (_obj *ClubActivityManager) GetClubList(Index int32, WxId string, NextIndex *int32, ClubInfoList *[]ClubInfo, ErrCode *ErrorCode, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(Index, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(WxId, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "GetClubList", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*NextIndex), 3, true)
	if err != nil {
		return ret, err
	}

	err, _, ty = _is.SkipToNoCheck(4, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		(*ClubInfoList) = make([]ClubInfo, length, length)
		for i0, e0 := int32(0), length; i0 < e0; i0++ {

			err = (*ClubInfoList)[i0].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}
	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}
	}

	err = _is.Read_int32((*int32)(&(*ErrCode)), 5, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetClubListWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *ClubActivityManager) GetClubListWithContext(ctx context.Context, Index int32, WxId string, NextIndex *int32, ClubInfoList *[]ClubInfo, ErrCode *ErrorCode, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(Index, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(WxId, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "GetClubList", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*NextIndex), 3, true)
	if err != nil {
		return ret, err
	}

	err, _, ty = _is.SkipToNoCheck(4, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		(*ClubInfoList) = make([]ClubInfo, length, length)
		for i1, e1 := int32(0), length; i1 < e1; i1++ {

			err = (*ClubInfoList)[i1].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}
	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}
	}

	err = _is.Read_int32((*int32)(&(*ErrCode)), 5, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetManagerClubList is the proxy function for the method defined in the tars file, with the context
func (_obj *ClubActivityManager) GetManagerClubList(Index int32, WxId string, NextIndex *int32, ClubInfoList *[]ClubInfo, ErrCode *ErrorCode, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(Index, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(WxId, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "GetManagerClubList", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*NextIndex), 3, true)
	if err != nil {
		return ret, err
	}

	err, _, ty = _is.SkipToNoCheck(4, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		(*ClubInfoList) = make([]ClubInfo, length, length)
		for i2, e2 := int32(0), length; i2 < e2; i2++ {

			err = (*ClubInfoList)[i2].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}
	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}
	}

	err = _is.Read_int32((*int32)(&(*ErrCode)), 5, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetManagerClubListWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *ClubActivityManager) GetManagerClubListWithContext(ctx context.Context, Index int32, WxId string, NextIndex *int32, ClubInfoList *[]ClubInfo, ErrCode *ErrorCode, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(Index, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(WxId, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "GetManagerClubList", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*NextIndex), 3, true)
	if err != nil {
		return ret, err
	}

	err, _, ty = _is.SkipToNoCheck(4, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		(*ClubInfoList) = make([]ClubInfo, length, length)
		for i3, e3 := int32(0), length; i3 < e3; i3++ {

			err = (*ClubInfoList)[i3].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}
	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}
	}

	err = _is.Read_int32((*int32)(&(*ErrCode)), 5, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//ApplyForClub is the proxy function for the method defined in the tars file, with the context
func (_obj *ClubActivityManager) ApplyForClub(WxId string, ClubId string, ErrCode *ErrorCode, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(WxId, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(ClubId, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "ApplyForClub", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32((*int32)(&(*ErrCode)), 3, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//ApplyForClubWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *ClubActivityManager) ApplyForClubWithContext(ctx context.Context, WxId string, ClubId string, ErrCode *ErrorCode, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(WxId, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(ClubId, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "ApplyForClub", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32((*int32)(&(*ErrCode)), 3, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetClubApply is the proxy function for the method defined in the tars file, with the context
func (_obj *ClubActivityManager) GetClubApply(ClubId string, Index int32, ApplyStatus int32, NextIndex *int32, ApplyList *[]ApplyInfo, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(ClubId, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(Index, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(ApplyStatus, 3)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "GetClubApply", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*NextIndex), 4, true)
	if err != nil {
		return ret, err
	}

	err, _, ty = _is.SkipToNoCheck(5, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		(*ApplyList) = make([]ApplyInfo, length, length)
		for i4, e4 := int32(0), length; i4 < e4; i4++ {

			err = (*ApplyList)[i4].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}
	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetClubApplyWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *ClubActivityManager) GetClubApplyWithContext(ctx context.Context, ClubId string, Index int32, ApplyStatus int32, NextIndex *int32, ApplyList *[]ApplyInfo, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(ClubId, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(Index, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(ApplyStatus, 3)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "GetClubApply", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*NextIndex), 4, true)
	if err != nil {
		return ret, err
	}

	err, _, ty = _is.SkipToNoCheck(5, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		(*ApplyList) = make([]ApplyInfo, length, length)
		for i5, e5 := int32(0), length; i5 < e5; i5++ {

			err = (*ApplyList)[i5].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}
	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetUserApply is the proxy function for the method defined in the tars file, with the context
func (_obj *ClubActivityManager) GetUserApply(WxId string, Index int32, ApplyStatus int32, NextIndex *int32, ApplyList *[]ApplyInfo, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(WxId, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(Index, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(ApplyStatus, 3)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "GetUserApply", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*NextIndex), 4, true)
	if err != nil {
		return ret, err
	}

	err, _, ty = _is.SkipToNoCheck(5, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		(*ApplyList) = make([]ApplyInfo, length, length)
		for i6, e6 := int32(0), length; i6 < e6; i6++ {

			err = (*ApplyList)[i6].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}
	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetUserApplyWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *ClubActivityManager) GetUserApplyWithContext(ctx context.Context, WxId string, Index int32, ApplyStatus int32, NextIndex *int32, ApplyList *[]ApplyInfo, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(WxId, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(Index, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(ApplyStatus, 3)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "GetUserApply", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*NextIndex), 4, true)
	if err != nil {
		return ret, err
	}

	err, _, ty = _is.SkipToNoCheck(5, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		(*ApplyList) = make([]ApplyInfo, length, length)
		for i7, e7 := int32(0), length; i7 < e7; i7++ {

			err = (*ApplyList)[i7].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}
	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//ModifyApplyStatus is the proxy function for the method defined in the tars file, with the context
func (_obj *ClubActivityManager) ModifyApplyStatus(WxId string, ClubId string, ApplyStatus int32, ErrCode *ErrorCode, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(WxId, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(ClubId, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(ApplyStatus, 3)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "ModifyApplyStatus", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32((*int32)(&(*ErrCode)), 4, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//ModifyApplyStatusWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *ClubActivityManager) ModifyApplyStatusWithContext(ctx context.Context, WxId string, ClubId string, ApplyStatus int32, ErrCode *ErrorCode, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(WxId, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(ClubId, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(ApplyStatus, 3)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "ModifyApplyStatus", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32((*int32)(&(*ErrCode)), 4, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//DeleteApply is the proxy function for the method defined in the tars file, with the context
func (_obj *ClubActivityManager) DeleteApply(WxId string, ClubId string, ErrCode *ErrorCode, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(WxId, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(ClubId, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "DeleteApply", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32((*int32)(&(*ErrCode)), 3, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//DeleteApplyWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *ClubActivityManager) DeleteApplyWithContext(ctx context.Context, WxId string, ClubId string, ErrCode *ErrorCode, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(WxId, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(ClubId, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "DeleteApply", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32((*int32)(&(*ErrCode)), 3, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//CreateActivity is the proxy function for the method defined in the tars file, with the context
func (_obj *ClubActivityManager) CreateActivity(WxId string, ActivityInfo *ActivityInfo, ErrCode *ErrorCode, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(WxId, 1)
	if err != nil {
		return ret, err
	}

	err = ActivityInfo.WriteBlock(_os, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "CreateActivity", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32((*int32)(&(*ErrCode)), 3, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//CreateActivityWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *ClubActivityManager) CreateActivityWithContext(ctx context.Context, WxId string, ActivityInfo *ActivityInfo, ErrCode *ErrorCode, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(WxId, 1)
	if err != nil {
		return ret, err
	}

	err = ActivityInfo.WriteBlock(_os, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "CreateActivity", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32((*int32)(&(*ErrCode)), 3, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetActivityList is the proxy function for the method defined in the tars file, with the context
func (_obj *ClubActivityManager) GetActivityList(Index int32, WxId string, ClubId string, NextIndex *int32, ActivityList *[]map[string]string, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(Index, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(WxId, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(ClubId, 3)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "GetActivityList", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*NextIndex), 4, true)
	if err != nil {
		return ret, err
	}

	err, _, ty = _is.SkipToNoCheck(5, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		(*ActivityList) = make([]map[string]string, length, length)
		for i8, e8 := int32(0), length; i8 < e8; i8++ {

			err, have = _is.SkipTo(codec.MAP, 0, false)
			if err != nil {
				return ret, err
			}
			if have {
				err = _is.Read_int32(&length, 0, true)
				if err != nil {
					return ret, err
				}
				(*ActivityList)[i8] = make(map[string]string)
				for i9, e9 := int32(0), length; i9 < e9; i9++ {
					var k9 string
					var v9 string

					err = _is.Read_string(&k9, 0, false)
					if err != nil {
						return ret, err
					}

					err = _is.Read_string(&v9, 1, false)
					if err != nil {
						return ret, err
					}

					(*ActivityList)[i8][k9] = v9
				}
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}
	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetActivityListWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *ClubActivityManager) GetActivityListWithContext(ctx context.Context, Index int32, WxId string, ClubId string, NextIndex *int32, ActivityList *[]map[string]string, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(Index, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(WxId, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(ClubId, 3)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "GetActivityList", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*NextIndex), 4, true)
	if err != nil {
		return ret, err
	}

	err, _, ty = _is.SkipToNoCheck(5, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		(*ActivityList) = make([]map[string]string, length, length)
		for i10, e10 := int32(0), length; i10 < e10; i10++ {

			err, have = _is.SkipTo(codec.MAP, 0, false)
			if err != nil {
				return ret, err
			}
			if have {
				err = _is.Read_int32(&length, 0, true)
				if err != nil {
					return ret, err
				}
				(*ActivityList)[i10] = make(map[string]string)
				for i11, e11 := int32(0), length; i11 < e11; i11++ {
					var k11 string
					var v11 string

					err = _is.Read_string(&k11, 0, false)
					if err != nil {
						return ret, err
					}

					err = _is.Read_string(&v11, 1, false)
					if err != nil {
						return ret, err
					}

					(*ActivityList)[i10][k11] = v11
				}
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}
	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//UpdateActivity is the proxy function for the method defined in the tars file, with the context
func (_obj *ClubActivityManager) UpdateActivity(ActivityInfo *ActivityInfo, ErrCode *ErrorCode, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = ActivityInfo.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "UpdateActivity", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32((*int32)(&(*ErrCode)), 2, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//UpdateActivityWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *ClubActivityManager) UpdateActivityWithContext(ctx context.Context, ActivityInfo *ActivityInfo, ErrCode *ErrorCode, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = ActivityInfo.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "UpdateActivity", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32((*int32)(&(*ErrCode)), 2, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//DeleteActivity is the proxy function for the method defined in the tars file, with the context
func (_obj *ClubActivityManager) DeleteActivity(ActivityId string, ErrCode *ErrorCode, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(ActivityId, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "DeleteActivity", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32((*int32)(&(*ErrCode)), 2, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//DeleteActivityWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *ClubActivityManager) DeleteActivityWithContext(ctx context.Context, ActivityId string, ErrCode *ErrorCode, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(ActivityId, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "DeleteActivity", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32((*int32)(&(*ErrCode)), 2, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetActivityDetail is the proxy function for the method defined in the tars file, with the context
func (_obj *ClubActivityManager) GetActivityDetail(ActivityId string, ActivityInfo *ActivityInfo, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(ActivityId, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "GetActivityDetail", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*ActivityInfo).ReadBlock(_is, 2, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetActivityDetailWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *ClubActivityManager) GetActivityDetailWithContext(ctx context.Context, ActivityId string, ActivityInfo *ActivityInfo, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(ActivityId, 1)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "GetActivityDetail", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*ActivityInfo).ReadBlock(_is, 2, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetActivityParticipate is the proxy function for the method defined in the tars file, with the context
func (_obj *ClubActivityManager) GetActivityParticipate(Index int32, ActivityId string, NextIndex *int32, ParticipateList *[]ActivityRecord, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(Index, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(ActivityId, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "GetActivityParticipate", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*NextIndex), 3, true)
	if err != nil {
		return ret, err
	}

	err, _, ty = _is.SkipToNoCheck(4, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		(*ParticipateList) = make([]ActivityRecord, length, length)
		for i12, e12 := int32(0), length; i12 < e12; i12++ {

			err = (*ParticipateList)[i12].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}
	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//GetActivityParticipateWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *ClubActivityManager) GetActivityParticipateWithContext(ctx context.Context, Index int32, ActivityId string, NextIndex *int32, ParticipateList *[]ActivityRecord, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(Index, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(ActivityId, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "GetActivityParticipate", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*NextIndex), 3, true)
	if err != nil {
		return ret, err
	}

	err, _, ty = _is.SkipToNoCheck(4, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		(*ParticipateList) = make([]ActivityRecord, length, length)
		for i13, e13 := int32(0), length; i13 < e13; i13++ {

			err = (*ParticipateList)[i13].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}
		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}
	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//ApplyForActivity is the proxy function for the method defined in the tars file, with the context
func (_obj *ClubActivityManager) ApplyForActivity(WxId string, ActivityId string, ErrCode *ErrorCode, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(WxId, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(ActivityId, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "ApplyForActivity", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32((*int32)(&(*ErrCode)), 3, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//ApplyForActivityWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *ClubActivityManager) ApplyForActivityWithContext(ctx context.Context, WxId string, ActivityId string, ErrCode *ErrorCode, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(WxId, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(ActivityId, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "ApplyForActivity", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32((*int32)(&(*ErrCode)), 3, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//DeleteActivityParticipate is the proxy function for the method defined in the tars file, with the context
func (_obj *ClubActivityManager) DeleteActivityParticipate(ActivityId string, WxId string, ErrCode *ErrorCode, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(ActivityId, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(WxId, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "DeleteActivityParticipate", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32((*int32)(&(*ErrCode)), 3, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//DeleteActivityParticipateWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *ClubActivityManager) DeleteActivityParticipateWithContext(ctx context.Context, ActivityId string, WxId string, ErrCode *ErrorCode, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(ActivityId, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(WxId, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "DeleteActivityParticipate", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}
	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32((*int32)(&(*ErrCode)), 3, true)
	if err != nil {
		return ret, err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//SetServant sets servant for the service.
func (_obj *ClubActivityManager) SetServant(s m.Servant) {
	_obj.s = s
}

//TarsSetTimeout sets the timeout for the servant which is in ms.
func (_obj *ClubActivityManager) TarsSetTimeout(t int) {
	_obj.s.TarsSetTimeout(t)
}
func (_obj *ClubActivityManager) setMap(l int, res *requestf.ResponsePacket, ctx map[string]string, sts map[string]string) {
	if l == 1 {
		for k, _ := range ctx {
			delete(ctx, k)
		}
		for k, v := range res.Context {
			ctx[k] = v
		}
	} else if l == 2 {
		for k, _ := range ctx {
			delete(ctx, k)
		}
		for k, v := range res.Context {
			ctx[k] = v
		}
		for k, _ := range sts {
			delete(sts, k)
		}
		for k, v := range res.Status {
			sts[k] = v
		}
	}
}

//AddServant adds servant  for the service.
func (_obj *ClubActivityManager) AddServant(imp _impClubActivityManager, obj string) {
	tars.AddServant(_obj, imp, obj)
}

//AddServant adds servant  for the service with context.
func (_obj *ClubActivityManager) AddServantWithContext(imp _impClubActivityManagerWithContext, obj string) {
	tars.AddServantWithContext(_obj, imp, obj)
}

type _impClubActivityManager interface {
	CreateClubManager(WxId string, ClubId string, ErrCode *ErrorCode) (ret int32, err error)
	CreateClub(ClubInfo *ClubInfo, ErrCode *ErrorCode) (ret int32, err error)
	GetClubList(Index int32, WxId string, NextIndex *int32, ClubInfoList *[]ClubInfo, ErrCode *ErrorCode) (ret int32, err error)
	GetManagerClubList(Index int32, WxId string, NextIndex *int32, ClubInfoList *[]ClubInfo, ErrCode *ErrorCode) (ret int32, err error)
	ApplyForClub(WxId string, ClubId string, ErrCode *ErrorCode) (ret int32, err error)
	GetClubApply(ClubId string, Index int32, ApplyStatus int32, NextIndex *int32, ApplyList *[]ApplyInfo) (ret int32, err error)
	GetUserApply(WxId string, Index int32, ApplyStatus int32, NextIndex *int32, ApplyList *[]ApplyInfo) (ret int32, err error)
	ModifyApplyStatus(WxId string, ClubId string, ApplyStatus int32, ErrCode *ErrorCode) (ret int32, err error)
	DeleteApply(WxId string, ClubId string, ErrCode *ErrorCode) (ret int32, err error)
	CreateActivity(WxId string, ActivityInfo *ActivityInfo, ErrCode *ErrorCode) (ret int32, err error)
	GetActivityList(Index int32, WxId string, ClubId string, NextIndex *int32, ActivityList *[]map[string]string) (ret int32, err error)
	UpdateActivity(ActivityInfo *ActivityInfo, ErrCode *ErrorCode) (ret int32, err error)
	DeleteActivity(ActivityId string, ErrCode *ErrorCode) (ret int32, err error)
	GetActivityDetail(ActivityId string, ActivityInfo *ActivityInfo) (ret int32, err error)
	GetActivityParticipate(Index int32, ActivityId string, NextIndex *int32, ParticipateList *[]ActivityRecord) (ret int32, err error)
	ApplyForActivity(WxId string, ActivityId string, ErrCode *ErrorCode) (ret int32, err error)
	DeleteActivityParticipate(ActivityId string, WxId string, ErrCode *ErrorCode) (ret int32, err error)
}
type _impClubActivityManagerWithContext interface {
	CreateClubManager(ctx context.Context, WxId string, ClubId string, ErrCode *ErrorCode) (ret int32, err error)
	CreateClub(ctx context.Context, ClubInfo *ClubInfo, ErrCode *ErrorCode) (ret int32, err error)
	GetClubList(ctx context.Context, Index int32, WxId string, NextIndex *int32, ClubInfoList *[]ClubInfo, ErrCode *ErrorCode) (ret int32, err error)
	GetManagerClubList(ctx context.Context, Index int32, WxId string, NextIndex *int32, ClubInfoList *[]ClubInfo, ErrCode *ErrorCode) (ret int32, err error)
	ApplyForClub(ctx context.Context, WxId string, ClubId string, ErrCode *ErrorCode) (ret int32, err error)
	GetClubApply(ctx context.Context, ClubId string, Index int32, ApplyStatus int32, NextIndex *int32, ApplyList *[]ApplyInfo) (ret int32, err error)
	GetUserApply(ctx context.Context, WxId string, Index int32, ApplyStatus int32, NextIndex *int32, ApplyList *[]ApplyInfo) (ret int32, err error)
	ModifyApplyStatus(ctx context.Context, WxId string, ClubId string, ApplyStatus int32, ErrCode *ErrorCode) (ret int32, err error)
	DeleteApply(ctx context.Context, WxId string, ClubId string, ErrCode *ErrorCode) (ret int32, err error)
	CreateActivity(ctx context.Context, WxId string, ActivityInfo *ActivityInfo, ErrCode *ErrorCode) (ret int32, err error)
	GetActivityList(ctx context.Context, Index int32, WxId string, ClubId string, NextIndex *int32, ActivityList *[]map[string]string) (ret int32, err error)
	UpdateActivity(ctx context.Context, ActivityInfo *ActivityInfo, ErrCode *ErrorCode) (ret int32, err error)
	DeleteActivity(ctx context.Context, ActivityId string, ErrCode *ErrorCode) (ret int32, err error)
	GetActivityDetail(ctx context.Context, ActivityId string, ActivityInfo *ActivityInfo) (ret int32, err error)
	GetActivityParticipate(ctx context.Context, Index int32, ActivityId string, NextIndex *int32, ParticipateList *[]ActivityRecord) (ret int32, err error)
	ApplyForActivity(ctx context.Context, WxId string, ActivityId string, ErrCode *ErrorCode) (ret int32, err error)
	DeleteActivityParticipate(ctx context.Context, ActivityId string, WxId string, ErrCode *ErrorCode) (ret int32, err error)
}

func CreateClubManager(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var WxId string
	err = _is.Read_string(&WxId, 1, true)
	if err != nil {
		return err
	}
	var ClubId string
	err = _is.Read_string(&ClubId, 2, true)
	if err != nil {
		return err
	}
	var ErrCode ErrorCode
	if withContext == false {
		_imp := _val.(_impClubActivityManager)
		ret, err := _imp.CreateClubManager(WxId, ClubId, &ErrCode)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impClubActivityManagerWithContext)
		ret, err := _imp.CreateClubManager(ctx, WxId, ClubId, &ErrCode)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = _os.Write_int32(int32(ErrCode), 3)
	if err != nil {
		return err
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func CreateClub(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var ClubInfo ClubInfo
	err = ClubInfo.ReadBlock(_is, 1, true)
	if err != nil {
		return err
	}
	var ErrCode ErrorCode
	if withContext == false {
		_imp := _val.(_impClubActivityManager)
		ret, err := _imp.CreateClub(&ClubInfo, &ErrCode)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impClubActivityManagerWithContext)
		ret, err := _imp.CreateClub(ctx, &ClubInfo, &ErrCode)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = _os.Write_int32(int32(ErrCode), 2)
	if err != nil {
		return err
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func GetClubList(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var Index int32
	err = _is.Read_int32(&Index, 1, true)
	if err != nil {
		return err
	}
	var WxId string
	err = _is.Read_string(&WxId, 2, true)
	if err != nil {
		return err
	}
	var NextIndex int32
	var ClubInfoList []ClubInfo
	var ErrCode ErrorCode
	if withContext == false {
		_imp := _val.(_impClubActivityManager)
		ret, err := _imp.GetClubList(Index, WxId, &NextIndex, &ClubInfoList, &ErrCode)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impClubActivityManagerWithContext)
		ret, err := _imp.GetClubList(ctx, Index, WxId, &NextIndex, &ClubInfoList, &ErrCode)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = _os.Write_int32(NextIndex, 3)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.LIST, 4)
	if err != nil {
		return err
	}
	err = _os.Write_int32(int32(len(ClubInfoList)), 0)
	if err != nil {
		return err
	}
	for _, v := range ClubInfoList {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return err
		}
	}

	err = _os.Write_int32(int32(ErrCode), 5)
	if err != nil {
		return err
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func GetManagerClubList(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var Index int32
	err = _is.Read_int32(&Index, 1, true)
	if err != nil {
		return err
	}
	var WxId string
	err = _is.Read_string(&WxId, 2, true)
	if err != nil {
		return err
	}
	var NextIndex int32
	var ClubInfoList []ClubInfo
	var ErrCode ErrorCode
	if withContext == false {
		_imp := _val.(_impClubActivityManager)
		ret, err := _imp.GetManagerClubList(Index, WxId, &NextIndex, &ClubInfoList, &ErrCode)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impClubActivityManagerWithContext)
		ret, err := _imp.GetManagerClubList(ctx, Index, WxId, &NextIndex, &ClubInfoList, &ErrCode)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = _os.Write_int32(NextIndex, 3)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.LIST, 4)
	if err != nil {
		return err
	}
	err = _os.Write_int32(int32(len(ClubInfoList)), 0)
	if err != nil {
		return err
	}
	for _, v := range ClubInfoList {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return err
		}
	}

	err = _os.Write_int32(int32(ErrCode), 5)
	if err != nil {
		return err
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func ApplyForClub(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var WxId string
	err = _is.Read_string(&WxId, 1, true)
	if err != nil {
		return err
	}
	var ClubId string
	err = _is.Read_string(&ClubId, 2, true)
	if err != nil {
		return err
	}
	var ErrCode ErrorCode
	if withContext == false {
		_imp := _val.(_impClubActivityManager)
		ret, err := _imp.ApplyForClub(WxId, ClubId, &ErrCode)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impClubActivityManagerWithContext)
		ret, err := _imp.ApplyForClub(ctx, WxId, ClubId, &ErrCode)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = _os.Write_int32(int32(ErrCode), 3)
	if err != nil {
		return err
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func GetClubApply(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var ClubId string
	err = _is.Read_string(&ClubId, 1, true)
	if err != nil {
		return err
	}
	var Index int32
	err = _is.Read_int32(&Index, 2, true)
	if err != nil {
		return err
	}
	var ApplyStatus int32
	err = _is.Read_int32(&ApplyStatus, 3, true)
	if err != nil {
		return err
	}
	var NextIndex int32
	var ApplyList []ApplyInfo
	if withContext == false {
		_imp := _val.(_impClubActivityManager)
		ret, err := _imp.GetClubApply(ClubId, Index, ApplyStatus, &NextIndex, &ApplyList)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impClubActivityManagerWithContext)
		ret, err := _imp.GetClubApply(ctx, ClubId, Index, ApplyStatus, &NextIndex, &ApplyList)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = _os.Write_int32(NextIndex, 4)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.LIST, 5)
	if err != nil {
		return err
	}
	err = _os.Write_int32(int32(len(ApplyList)), 0)
	if err != nil {
		return err
	}
	for _, v := range ApplyList {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return err
		}
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func GetUserApply(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var WxId string
	err = _is.Read_string(&WxId, 1, true)
	if err != nil {
		return err
	}
	var Index int32
	err = _is.Read_int32(&Index, 2, true)
	if err != nil {
		return err
	}
	var ApplyStatus int32
	err = _is.Read_int32(&ApplyStatus, 3, true)
	if err != nil {
		return err
	}
	var NextIndex int32
	var ApplyList []ApplyInfo
	if withContext == false {
		_imp := _val.(_impClubActivityManager)
		ret, err := _imp.GetUserApply(WxId, Index, ApplyStatus, &NextIndex, &ApplyList)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impClubActivityManagerWithContext)
		ret, err := _imp.GetUserApply(ctx, WxId, Index, ApplyStatus, &NextIndex, &ApplyList)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = _os.Write_int32(NextIndex, 4)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.LIST, 5)
	if err != nil {
		return err
	}
	err = _os.Write_int32(int32(len(ApplyList)), 0)
	if err != nil {
		return err
	}
	for _, v := range ApplyList {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return err
		}
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func ModifyApplyStatus(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var WxId string
	err = _is.Read_string(&WxId, 1, true)
	if err != nil {
		return err
	}
	var ClubId string
	err = _is.Read_string(&ClubId, 2, true)
	if err != nil {
		return err
	}
	var ApplyStatus int32
	err = _is.Read_int32(&ApplyStatus, 3, true)
	if err != nil {
		return err
	}
	var ErrCode ErrorCode
	if withContext == false {
		_imp := _val.(_impClubActivityManager)
		ret, err := _imp.ModifyApplyStatus(WxId, ClubId, ApplyStatus, &ErrCode)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impClubActivityManagerWithContext)
		ret, err := _imp.ModifyApplyStatus(ctx, WxId, ClubId, ApplyStatus, &ErrCode)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = _os.Write_int32(int32(ErrCode), 4)
	if err != nil {
		return err
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func DeleteApply(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var WxId string
	err = _is.Read_string(&WxId, 1, true)
	if err != nil {
		return err
	}
	var ClubId string
	err = _is.Read_string(&ClubId, 2, true)
	if err != nil {
		return err
	}
	var ErrCode ErrorCode
	if withContext == false {
		_imp := _val.(_impClubActivityManager)
		ret, err := _imp.DeleteApply(WxId, ClubId, &ErrCode)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impClubActivityManagerWithContext)
		ret, err := _imp.DeleteApply(ctx, WxId, ClubId, &ErrCode)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = _os.Write_int32(int32(ErrCode), 3)
	if err != nil {
		return err
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func CreateActivity(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var WxId string
	err = _is.Read_string(&WxId, 1, true)
	if err != nil {
		return err
	}
	var ActivityInfo ActivityInfo
	err = ActivityInfo.ReadBlock(_is, 2, true)
	if err != nil {
		return err
	}
	var ErrCode ErrorCode
	if withContext == false {
		_imp := _val.(_impClubActivityManager)
		ret, err := _imp.CreateActivity(WxId, &ActivityInfo, &ErrCode)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impClubActivityManagerWithContext)
		ret, err := _imp.CreateActivity(ctx, WxId, &ActivityInfo, &ErrCode)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = _os.Write_int32(int32(ErrCode), 3)
	if err != nil {
		return err
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func GetActivityList(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var Index int32
	err = _is.Read_int32(&Index, 1, true)
	if err != nil {
		return err
	}
	var WxId string
	err = _is.Read_string(&WxId, 2, true)
	if err != nil {
		return err
	}
	var ClubId string
	err = _is.Read_string(&ClubId, 3, true)
	if err != nil {
		return err
	}
	var NextIndex int32
	var ActivityList []map[string]string
	if withContext == false {
		_imp := _val.(_impClubActivityManager)
		ret, err := _imp.GetActivityList(Index, WxId, ClubId, &NextIndex, &ActivityList)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impClubActivityManagerWithContext)
		ret, err := _imp.GetActivityList(ctx, Index, WxId, ClubId, &NextIndex, &ActivityList)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = _os.Write_int32(NextIndex, 4)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.LIST, 5)
	if err != nil {
		return err
	}
	err = _os.Write_int32(int32(len(ActivityList)), 0)
	if err != nil {
		return err
	}
	for _, v := range ActivityList {

		err = _os.WriteHead(codec.MAP, 0)
		if err != nil {
			return err
		}
		err = _os.Write_int32(int32(len(v)), 0)
		if err != nil {
			return err
		}
		for k14, v14 := range v {

			err = _os.Write_string(k14, 0)
			if err != nil {
				return err
			}

			err = _os.Write_string(v14, 1)
			if err != nil {
				return err
			}
		}
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func UpdateActivity(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var ActivityInfo ActivityInfo
	err = ActivityInfo.ReadBlock(_is, 1, true)
	if err != nil {
		return err
	}
	var ErrCode ErrorCode
	if withContext == false {
		_imp := _val.(_impClubActivityManager)
		ret, err := _imp.UpdateActivity(&ActivityInfo, &ErrCode)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impClubActivityManagerWithContext)
		ret, err := _imp.UpdateActivity(ctx, &ActivityInfo, &ErrCode)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = _os.Write_int32(int32(ErrCode), 2)
	if err != nil {
		return err
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func DeleteActivity(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var ActivityId string
	err = _is.Read_string(&ActivityId, 1, true)
	if err != nil {
		return err
	}
	var ErrCode ErrorCode
	if withContext == false {
		_imp := _val.(_impClubActivityManager)
		ret, err := _imp.DeleteActivity(ActivityId, &ErrCode)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impClubActivityManagerWithContext)
		ret, err := _imp.DeleteActivity(ctx, ActivityId, &ErrCode)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = _os.Write_int32(int32(ErrCode), 2)
	if err != nil {
		return err
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func GetActivityDetail(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var ActivityId string
	err = _is.Read_string(&ActivityId, 1, true)
	if err != nil {
		return err
	}
	var ActivityInfo ActivityInfo
	if withContext == false {
		_imp := _val.(_impClubActivityManager)
		ret, err := _imp.GetActivityDetail(ActivityId, &ActivityInfo)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impClubActivityManagerWithContext)
		ret, err := _imp.GetActivityDetail(ctx, ActivityId, &ActivityInfo)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = ActivityInfo.WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func GetActivityParticipate(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var Index int32
	err = _is.Read_int32(&Index, 1, true)
	if err != nil {
		return err
	}
	var ActivityId string
	err = _is.Read_string(&ActivityId, 2, true)
	if err != nil {
		return err
	}
	var NextIndex int32
	var ParticipateList []ActivityRecord
	if withContext == false {
		_imp := _val.(_impClubActivityManager)
		ret, err := _imp.GetActivityParticipate(Index, ActivityId, &NextIndex, &ParticipateList)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impClubActivityManagerWithContext)
		ret, err := _imp.GetActivityParticipate(ctx, Index, ActivityId, &NextIndex, &ParticipateList)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = _os.Write_int32(NextIndex, 3)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.LIST, 4)
	if err != nil {
		return err
	}
	err = _os.Write_int32(int32(len(ParticipateList)), 0)
	if err != nil {
		return err
	}
	for _, v := range ParticipateList {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return err
		}
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func ApplyForActivity(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var WxId string
	err = _is.Read_string(&WxId, 1, true)
	if err != nil {
		return err
	}
	var ActivityId string
	err = _is.Read_string(&ActivityId, 2, true)
	if err != nil {
		return err
	}
	var ErrCode ErrorCode
	if withContext == false {
		_imp := _val.(_impClubActivityManager)
		ret, err := _imp.ApplyForActivity(WxId, ActivityId, &ErrCode)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impClubActivityManagerWithContext)
		ret, err := _imp.ApplyForActivity(ctx, WxId, ActivityId, &ErrCode)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = _os.Write_int32(int32(ErrCode), 3)
	if err != nil {
		return err
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func DeleteActivityParticipate(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var ActivityId string
	err = _is.Read_string(&ActivityId, 1, true)
	if err != nil {
		return err
	}
	var WxId string
	err = _is.Read_string(&WxId, 2, true)
	if err != nil {
		return err
	}
	var ErrCode ErrorCode
	if withContext == false {
		_imp := _val.(_impClubActivityManager)
		ret, err := _imp.DeleteActivityParticipate(ActivityId, WxId, &ErrCode)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impClubActivityManagerWithContext)
		ret, err := _imp.DeleteActivityParticipate(ctx, ActivityId, WxId, &ErrCode)
		if err != nil {
			return err
		}

		err = _os.Write_int32(ret, 0)
		if err != nil {
			return err
		}
	}

	err = _os.Write_int32(int32(ErrCode), 3)
	if err != nil {
		return err
	}

	_ = length
	_ = have
	_ = ty
	return nil
}

//Dispatch is used to call the server side implemnet for the method defined in the tars file. withContext shows using context or not.
func (_obj *ClubActivityManager) Dispatch(ctx context.Context, _val interface{}, req *requestf.RequestPacket, resp *requestf.ResponsePacket, withContext bool) (err error) {
	_is := codec.NewReader(tools.Int8ToByte(req.SBuffer))
	_os := codec.NewBuffer()
	switch req.SFuncName {
	case "CreateClubManager":
		err := CreateClubManager(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "CreateClub":
		err := CreateClub(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "GetClubList":
		err := GetClubList(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "GetManagerClubList":
		err := GetManagerClubList(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "ApplyForClub":
		err := ApplyForClub(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "GetClubApply":
		err := GetClubApply(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "GetUserApply":
		err := GetUserApply(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "ModifyApplyStatus":
		err := ModifyApplyStatus(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "DeleteApply":
		err := DeleteApply(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "CreateActivity":
		err := CreateActivity(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "GetActivityList":
		err := GetActivityList(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "UpdateActivity":
		err := UpdateActivity(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "DeleteActivity":
		err := DeleteActivity(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "GetActivityDetail":
		err := GetActivityDetail(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "GetActivityParticipate":
		err := GetActivityParticipate(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "ApplyForActivity":
		err := ApplyForActivity(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "DeleteActivityParticipate":
		err := DeleteActivityParticipate(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}

	default:
		return fmt.Errorf("func mismatch")
	}
	var _status map[string]string
	s, ok := current.GetResponseStatus(ctx)
	if ok && s != nil {
		_status = s
	}
	var _context map[string]string
	c, ok := current.GetResponseContext(ctx)
	if ok && c != nil {
		_context = c
	}
	*resp = requestf.ResponsePacket{
		IVersion:     1,
		CPacketType:  0,
		IRequestId:   req.IRequestId,
		IMessageType: 0,
		IRet:         0,
		SBuffer:      tools.ByteToInt8(_os.ToBytes()),
		Status:       _status,
		SResultDesc:  "",
		Context:      _context,
	}
	return nil
}
